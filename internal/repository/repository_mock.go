// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source=repo.go -destination=repository_mock.go -package=repository
//
// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	models "job-port-api/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// // FetchAllCompanies implements UserRepo.
// func (*MockUserRepo) FetchAllCompanies(ctx context.Context) ([]models.Company, error) {
// 	panic("unimplemented")
// }

// FetchCompany implements UserRepo.
// func (*MockUserRepo) FetchCompany(ctx context.Context, cid uint64) (models.Company, error) {
// 	panic("unimplemented")
// }

// FetchJobByCompanyId implements UserRepo.
func (*MockUserRepo) FetchJobByCompanyId(ctx context.Context, cid uint64) ([]models.Job, error) {
	panic("unimplemented")
}

// FetchJobPosts implements UserRepo.
func (*MockUserRepo) FetchJobPosts(ctx context.Context) ([]models.Job, error) {
	panic("unimplemented")
}

// Fetchjob implements UserRepo.
func (*MockUserRepo) Fetchjob(ctx context.Context, cid uint64) (models.Job, error) {
	panic("unimplemented")
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CheckEmail mocks base method.
func (m *MockUserRepo) CheckEmail(ctx context.Context, email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmail", ctx, email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmail indicates an expected call of CheckEmail.
func (mr *MockUserRepoMockRecorder) CheckEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmail", reflect.TypeOf((*MockUserRepo)(nil).CheckEmail), ctx, email)
}

// CreateCompany mocks base method.
func (m *MockUserRepo) CreateCompany(ctx context.Context, companyData models.Company) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, companyData)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockUserRepoMockRecorder) CreateCompany(ctx, companyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockUserRepo)(nil).CreateCompany), ctx, companyData)
}

// CreateJob mocks base method.
func (m *MockUserRepo) CreateJob(ctx context.Context, jobData models.Job) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, jobData)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockUserRepoMockRecorder) CreateJob(ctx, jobData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockUserRepo)(nil).CreateJob), ctx, jobData)
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(userData models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userData)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), userData)
}

// ViewAllCompanies mocks base method.
func (m *MockUserRepo) FetchAllCompanies(ctx context.Context) ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllCompanies", ctx)
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllCompanies indicates an expected call of ViewAllCompanies.
func (mr *MockUserRepoMockRecorder) FetchAllCompanies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllCompanies", reflect.TypeOf((*MockUserRepo)(nil).FetchAllCompanies), ctx)
}

// ViewCompany mocks base method.
func (m *MockUserRepo) FetchCompany(ctx context.Context, cid uint64) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCompany", ctx, cid)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCompany indicates an expected call of ViewCompany.
func (mr *MockUserRepoMockRecorder) FetchCompany(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCompany", reflect.TypeOf((*MockUserRepo)(nil).FetchCompany), ctx, cid)
}

// ViewJobByCid mocks base method.
func (m *MockUserRepo) ViewJobByCid(ctx context.Context, cid uint64) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobByCid", ctx, cid)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobByCid indicates an expected call of ViewJobByCid.
func (mr *MockUserRepoMockRecorder) ViewJobByCid(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobByCid", reflect.TypeOf((*MockUserRepo)(nil).ViewJobByCid), ctx, cid)
}

// ViewJobPostings mocks base method.
func (m *MockUserRepo) ViewJobPostings(ctx context.Context) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobPostings", ctx)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobPostings indicates an expected call of ViewJobPostings.
func (mr *MockUserRepoMockRecorder) ViewJobPostings(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobPostings", reflect.TypeOf((*MockUserRepo)(nil).ViewJobPostings), ctx)
}

// Viewjob mocks base method.
func (m *MockUserRepo) Viewjob(ctx context.Context, cid uint64) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Viewjob", ctx, cid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Viewjob indicates an expected call of Viewjob.
func (mr *MockUserRepoMockRecorder) Viewjob(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Viewjob", reflect.TypeOf((*MockUserRepo)(nil).Viewjob), ctx, cid)
}
