// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=service
//
// Package service is a generated GoMock package.
package service

import (
	context "context"
	models "job-port-api/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// AddJob implements UserService.
func (*MockUserService) AddJob(ctx context.Context, jobData models.Job) (models.Job, error) {
	panic("unimplemented")
}

// FetchCompByid implements UserService.
func (*MockUserService) FetchCompByid(ctx context.Context, cid uint64) (models.Company, error) {
	panic("unimplemented")
}

// FetchAllCompanies implements UserService.
func (*MockUserService) FetchAllCompanies(ctx context.Context) ([]models.Company, error) {
	panic("unimplemented")
}

// FetchCompanyDetails implements UserService.
func (*MockUserService) FetchCompanyDetails(ctx context.Context, cid uint64) (models.Company, error) {
	panic("unimplemented")
}

// FetchJobDetails implements UserService.
func (*MockUserService) FetchJobDetails(ctx context.Context, cid uint64) ([]models.Job, error) {
	panic("unimplemented")
}

// FetchJobDetailsById implements UserService.
func (*MockUserService) FetchJobDetailsById(ctx context.Context, cid uint64) (models.Job, error) {
	panic("unimplemented")
}

// FetchJobPosts implements UserService.
func (*MockUserService) FetchJobPosts(ctx context.Context) ([]models.Job, error) {
	panic("unimplemented")
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AddCompanyDetails mocks base method.
func (m *MockUserService) AddCompanyDetails(ctx context.Context, companyData models.Company) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCompanyDetails", ctx, companyData)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCompanyDetails indicates an expected call of AddCompanyDetails.
func (mr *MockUserServiceMockRecorder) AddCompanyDetails(ctx, companyData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCompanyDetails", reflect.TypeOf((*MockUserService)(nil).AddCompanyDetails), ctx, companyData)
}

// AddJobDetails mocks base method.
func (m *MockUserService) AddJobDetails(ctx context.Context, jobData models.Job) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJobDetails", ctx, jobData)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddJobDetails indicates an expected call of AddJobDetails.
func (mr *MockUserServiceMockRecorder) AddJobDetails(ctx, jobData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJobDetails", reflect.TypeOf((*MockUserService)(nil).AddJobDetails), ctx, jobData)
}

// UserLogin mocks base method.
func (m *MockUserService) UserLogin(ctx context.Context, userData models.UserLogin) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, userData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserServiceMockRecorder) UserLogin(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserService)(nil).UserLogin), ctx, userData)
}

// UserSignup mocks base method.
func (m *MockUserService) UserSignup(ctx context.Context, userData models.UserSignup) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", ctx, userData)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockUserServiceMockRecorder) UserSignup(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockUserService)(nil).UserSignup), ctx, userData)
}

// ViewAllCompanies mocks base method.
func (m *MockUserService) ViewAllCompanies(ctx context.Context) ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllCompanies", ctx)
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllCompanies indicates an expected call of ViewAllCompanies.
func (mr *MockUserServiceMockRecorder) ViewAllCompanies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllCompanies", reflect.TypeOf((*MockUserService)(nil).ViewAllCompanies), ctx)
}

// ViewAllJobPostings mocks base method.
func (m *MockUserService) ViewAllJobPostings(ctx context.Context) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllJobPostings", ctx)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllJobPostings indicates an expected call of ViewAllJobPostings.
func (mr *MockUserServiceMockRecorder) ViewAllJobPostings(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllJobPostings", reflect.TypeOf((*MockUserService)(nil).ViewAllJobPostings), ctx)
}

// ViewCompanyDetails mocks base method.
func (m *MockUserService) ViewCompanyDetails(ctx context.Context, cid uint64) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCompanyDetails", ctx, cid)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCompanyDetails indicates an expected call of ViewCompanyDetails.
func (mr *MockUserServiceMockRecorder) ViewCompanyDetails(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCompanyDetails", reflect.TypeOf((*MockUserService)(nil).ViewCompanyDetails), ctx, cid)
}

// ViewJobDetails mocks base method.
func (m *MockUserService) ViewJobDetails(ctx context.Context, cid uint64) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobDetails", ctx, cid)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobDetails indicates an expected call of ViewJobDetails.
func (mr *MockUserServiceMockRecorder) ViewJobDetails(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobDetails", reflect.TypeOf((*MockUserService)(nil).ViewJobDetails), ctx, cid)
}

// ViewJobDetailsById mocks base method.
func (m *MockUserService) ViewJobDetailsById(ctx context.Context, cid uint64) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobDetailsById", ctx, cid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobDetailsById indicates an expected call of ViewJobDetailsById.
func (mr *MockUserServiceMockRecorder) ViewJobDetailsById(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobDetailsById", reflect.TypeOf((*MockUserService)(nil).ViewJobDetailsById), ctx, cid)
}
